const fs = require('fs');
const path = require('path');

// Path to the mapping file generated by the upload script
const MAPPING_FILE = path.join(__dirname, '../src/data/cloudinary-image-mapping.json');
const PROPERTIES_FILE = path.join(__dirname, '../src/app/data/properties.ts');

// Function to load the Cloudinary mapping
function loadCloudinaryMapping() {
  try {
    if (!fs.existsSync(MAPPING_FILE)) {
      console.error('❌ Cloudinary mapping file not found. Run the upload script first.');
      return null;
    }
    
    const mappingData = JSON.parse(fs.readFileSync(MAPPING_FILE, 'utf8'));
    console.log(`📁 Loaded mapping for ${mappingData.successfulUploads} images`);
    return mappingData;
  } catch (error) {
    console.error('❌ Failed to load mapping file:', error.message);
    return null;
  }
}

// Function to create a mapping from filename to Cloudinary URL
function createFilenameToUrlMapping(mappingData) {
  const filenameToUrl = {};
  
  mappingData.images.forEach(image => {
    filenameToUrl[image.fileName] = {
      url: image.cloudinaryUrl,
      publicId: image.publicId,
      width: image.width,
      height: image.height,
      format: image.format,
      size: image.size
    };
  });
  
  return filenameToUrl;
}

// Function to update properties data
function updatePropertiesWithCloudinaryUrls(filenameToUrl) {
  try {
    // Read the properties file
    let propertiesContent = fs.readFileSync(PROPERTIES_FILE, 'utf8');
    
    // Find and replace local image paths with Cloudinary URLs
    let updatedCount = 0;
    
    // Update each property that has a local image path
    Object.keys(filenameToUrl).forEach(filename => {
      const localPath = `/images/${filename}`;
      const cloudinaryData = filenameToUrl[filename];
      
      // Create the updated image data
      const updatedImageData = {
        url: cloudinaryData.url,
        thumbnailUrl: cloudinaryData.url.replace('/upload/', '/upload/c_thumb,w_150,h_150,q_80/'),
        mediumUrl: cloudinaryData.url.replace('/upload/', '/upload/c_fill,w_400,h_300,q_85/'),
        largeUrl: cloudinaryData.url.replace('/upload/', '/upload/c_fill,w_800,h_600,q_90/'),
        publicId: cloudinaryData.publicId,
        width: cloudinaryData.width,
        height: cloudinaryData.height,
        format: cloudinaryData.format,
        size: cloudinaryData.size
      };
      
      // Replace the local image path with Cloudinary URL
      if (propertiesContent.includes(localPath)) {
        propertiesContent = propertiesContent.replace(
          new RegExp(`image: '${localPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}'`, 'g'),
          `image: '${cloudinaryData.url}'`
        );
        
        // Add the full images array for this property
        const imageArrayString = `images: [${JSON.stringify(updatedImageData)}]`;
        
        // Find the property object and add images array
        const propertyRegex = new RegExp(`(\\{[^}]*image: '${cloudinaryData.url}'[^}]*)(\\})`, 'g');
        propertiesContent = propertiesContent.replace(propertyRegex, `$1, ${imageArrayString}$2`);
        
        updatedCount++;
        console.log(`✅ Updated property with image: ${filename}`);
      }
    });
    
    // Write the updated content back to the file
    fs.writeFileSync(PROPERTIES_FILE, propertiesContent, 'utf8');
    
    console.log(`\n📊 Update Summary:`);
    console.log(`✅ Updated ${updatedCount} properties with Cloudinary URLs`);
    console.log(`📄 Properties file updated: ${PROPERTIES_FILE}`);
    
    return updatedCount;
  } catch (error) {
    console.error('❌ Failed to update properties:', error.message);
    return 0;
  }
}

// Function to create a backup of the original properties file
function createBackup() {
  try {
    const backupPath = PROPERTIES_FILE.replace('.ts', '.backup.ts');
    fs.copyFileSync(PROPERTIES_FILE, backupPath);
    console.log(`💾 Backup created: ${backupPath}`);
    return true;
  } catch (error) {
    console.error('❌ Failed to create backup:', error.message);
    return false;
  }
}

// Main function
function updateProperties() {
  try {
    console.log('🔄 Starting property update with Cloudinary URLs...\n');
    
    // Load the Cloudinary mapping
    const mappingData = loadCloudinaryMapping();
    if (!mappingData) {
      return;
    }
    
    // Create filename to URL mapping
    const filenameToUrl = createFilenameToUrlMapping(mappingData);
    console.log(`📋 Created mapping for ${Object.keys(filenameToUrl).length} images\n`);
    
    // Create backup
    if (!createBackup()) {
      console.log('⚠️  Proceeding without backup...\n');
    }
    
    // Update properties
    const updatedCount = updatePropertiesWithCloudinaryUrls(filenameToUrl);
    
    if (updatedCount > 0) {
      console.log('\n🎉 Properties updated successfully!');
      console.log('📝 Next steps:');
      console.log('  1. Check the updated properties file');
      console.log('  2. Test that images display correctly');
      console.log('  3. Consider removing local image files');
    } else {
      console.log('\n⚠️  No properties were updated. Check if image paths match.');
    }
    
  } catch (error) {
    console.error('❌ Property update failed:', error);
  }
}

// Run the script
if (require.main === module) {
  updateProperties();
}

module.exports = { updateProperties };
